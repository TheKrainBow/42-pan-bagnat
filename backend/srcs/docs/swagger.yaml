basePath: /api/v1
definitions:
  modules.Module:
    description: API Module model
    properties:
      id:
        example: module_01HZ0MMK4S6VQW4WPHB6NZ7R7X
        type: string
      last_update:
        example: "2025-02-18T15:00:00Z"
        type: string
      late_commits:
        example: 2
        type: integer
      latest_version:
        example: "1.7"
        type: string
      name:
        example: captain-hook
        type: string
      status:
        allOf:
        - $ref: '#/definitions/modules.ModuleStatus'
        example: enabled
      url:
        example: https://github.com/some-user/some-repo
        type: string
      version:
        example: "1.2"
        type: string
    type: object
  modules.ModulePatchInput:
    description: API Module model
    properties:
      gitBranch:
        example: main
        type: string
      name:
        example: captain-hook
        type: string
      url:
        example: https://github.com/some-user/some-repo
        type: string
    type: object
  modules.ModuleStatus:
    enum:
    - enabled
    - disabled
    - downloading
    type: string
    x-enum-varnames:
    - Enabled
    - Disabled
    - Downloading
  roles.Role:
    description: API Role model
    properties:
      color:
        example: "0xFF00FF"
        type: string
      id:
        example: role_01HZ0MMK4S6VQW4WPHB6NZ7R7X
        type: string
      name:
        example: IT
        type: string
    type: object
  roles.RolePatchInput:
    description: API Role model
    properties:
      color:
        example: "0xFF00FF"
        type: string
      name:
        example: IT
        type: string
    type: object
  users.User:
    description: API User model
    properties:
      ft_id:
        example: "1492"
        type: string
      ft_is_staff:
        example: true
        type: boolean
      ft_login:
        example: heinz
        type: string
      ft_photo:
        example: https://intra.42.fr/some-login/some-id
        type: string
      id:
        example: user_01HZ0MMK4S6VQW4WPHB6NZ7R7X
        type: string
      is_staff:
        example: true
        type: boolean
      last_seen:
        example: "2025-02-18T15:00:00Z"
        type: string
      roles:
        items:
          $ref: '#/definitions/roles.Role'
        type: array
    type: object
  users.UserPostInput:
    description: API User model
    properties:
      gitBranch:
        example: main
        type: string
      id:
        example: user_01HZ0MMK4S6VQW4WPHB6NZ7R7X
        type: string
      login:
        example: heinz
        type: string
      url:
        example: https://intra.42.fr/some-login/some-id
        type: string
    type: object
  version.VersionResponse:
    description: API version response model
    properties:
      version:
        example: "1.1"
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API REST du projet Pan Bagnat.
  title: Pan Bagnat API
  version: "1.1"
paths:
  /modules:
    delete:
      consumes:
      - application/json
      description: Delete a module for your campus (All module datas will be lost!)
      parameters:
      - description: Module input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/modules.ModulePatchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete Module
      tags:
      - modules
    get:
      consumes:
      - application/json
      description: Returns all the available modules for your campus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/modules.Module'
            type: array
      summary: Get Module List
      tags:
      - modules
    post:
      consumes:
      - application/json
      description: Download a new module for your campus
      parameters:
      - description: Module input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/modules.ModulePatchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modules.Module'
      summary: Post Module List
      tags:
      - modules
  /modules/{moduleID}:
    get:
      consumes:
      - application/json
      description: Returns all the available modules for your campus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modules.Module'
      summary: Get Module List
      tags:
      - modules
    patch:
      consumes:
      - application/json
      description: Download a new module for your campus
      parameters:
      - description: Module input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/modules.ModulePatchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modules.Module'
      summary: Post Module List
      tags:
      - modules
  /roles:
    delete:
      consumes:
      - application/json
      description: Delete a role for your campus (All role datas will be lost!)
      parameters:
      - description: Role input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/roles.RolePatchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete Role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Returns all the available roles for your campus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/roles.Role'
            type: array
      summary: Get Role List
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Download a new role for your campus
      parameters:
      - description: Role input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/roles.RolePatchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/roles.Role'
      summary: Post Role List
      tags:
      - roles
  /roles/{roleID}:
    get:
      consumes:
      - application/json
      description: Returns all the available roles for your campus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/roles.Role'
      summary: Get Role List
      tags:
      - roles
    patch:
      consumes:
      - application/json
      description: Download a new module for your campus
      parameters:
      - description: Role input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/roles.RolePatchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/roles.Role'
      summary: Post Role List
      tags:
      - roles
  /users:
    delete:
      consumes:
      - application/json
      description: Delete a user for your campus (All user datas will be lost!)
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete User
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Returns all the available users for your campus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
      summary: Get User List
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Download a new user for your campus
      parameters:
      - description: User input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/users.UserPostInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Post User List
      tags:
      - users
  /users/{userID}:
    get:
      consumes:
      - application/json
      description: Returns all the available users for your campus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Get User List
      tags:
      - users
  /version:
    get:
      consumes:
      - application/json
      description: Returns the current version of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/version.VersionResponse'
      summary: Get API version
      tags:
      - version
swagger: "2.0"
